######################################################################
# Automatically generated by qmake (2.01a) Sat Dec 1 11:20:27 2012
######################################################################

TEMPLATE = app
TARGET = 
DEPENDPATH = . \
              icstring \
              java_lexer \
              lambda/arithmetic_interpreter \
              lambda/misc \
              lambda/xml \
              lambda/syntax/closure \
              lambda/syntax/composite \
              lambda/syntax/expression \
              lambda/syntax/function_composition \
              lambda/syntax/grammar \
              lambda/syntax/node_edge \
              lambda/syntax/scalar \
              lambda/syntax/stack \
              lambda/syntax/std_bitset \
              lambda/syntax/std_map_std_pair \
              lambda/syntax/std_ostream \
              lambda/syntax/std_set_std_pair \
              lambda/syntax/stl_container \
              lambda/syntax/stl_iterator \
              lambda/syntax/subscript_operator \
              lambda/syntax/text_transformation \
              lambda/syntax/tracing
INCLUDEPATH += ..

# Input
HEADERS = cpp_comment.h \
           filename_parser.h \
           icstring/icstring.h \
           java_lexer/java_lexer.h \
           lambda/arithmetic_interpreter/interpreter.h \
           lambda/arithmetic_interpreter/lexer.h \
           lambda/xml/xml_lexer.h \
           lambda/xml/xml_parser.h \
           lambda/xml/xml_stream_policy.h \
           lambda/xml/xml_tree_show.h \
           lambda/xml/xml_tree_struct.h \
           lambda/syntax/composite/dump_lambda.h
SOURCES = action_handler.cpp \
           arithmetics.cpp \
           cpp_comment_strip.cpp \
           csv2xml.cpp \
           custom_space_policy.cpp \
           edge_functors.cpp \
           edge_sort.cpp \
           filename_parser.cpp \
           functor.cpp \
           grammar.cpp \
           gumus.cpp \
           icsubstring.cpp \
           line_navigate.cpp \
           line_parser.cpp \
           mutable_substring.cpp \
           node_find_class.cpp \
           node_functors.cpp \
           number2words.cpp \
           offset2line.cpp \
           partition_file.cpp \
           policy_dash.cpp \
           policy_stream.cpp \
           postal_code.cpp \
           postal_code_strict.cpp \
           quotes_html.cpp \
           rule_adaptor.cpp \
           rule_formats.cpp \
           rule_traced.cpp \
           search_replace.cpp \
           search_replace_map.cpp \
           stream_edge.cpp \
           string_set_lexeme.cpp \
           text2array.cpp \
           void_regions.cpp \
           word_count.cpp \
           xtl_bitflags.cpp \
           xyz.cpp \
           java_lexer/java_lexer.cpp \
           lambda/arithmetic_interpreter/arithmetic_interpreter.cpp \
           lambda/misc/balanced_output.cpp \
           lambda/misc/digit_parser.cpp \
           lambda/misc/inline_replace.cpp \
           lambda/xml/xml_parser.cpp \
           lambda/syntax/closure/closure_explicit_template_params.cpp \
           lambda/syntax/closure/closure_mem_noarg.cpp \
           lambda/syntax/closure/closure_replace.cpp \
           lambda/syntax/closure/closure_static_action.cpp \
           lambda/syntax/closure/closure_static_noarg.cpp \
           lambda/syntax/closure/closure_static_noarg_nonvoid.cpp \
           lambda/syntax/closure/closure_vect_size.cpp \
           lambda/syntax/closure/closure_vect_size_alias.cpp \
           lambda/syntax/closure/int_memfun_noarg.cpp \
           lambda/syntax/closure/int_memfun_onearg.cpp \
           lambda/syntax/closure/void_memfun_noarg.cpp \
           lambda/syntax/closure/void_memfun_onearg.cpp \
           lambda/syntax/composite/lambda_composite_tree.cpp \
           lambda/syntax/composite/make_translator_demo.cpp \
           lambda/syntax/expression/lambda_double.cpp \
           lambda/syntax/expression/lambda_expression.cpp \
           lambda/syntax/function_composition/closure_translator.cpp \
           lambda/syntax/function_composition/dictionary_translator.cpp \
           lambda/syntax/function_composition/dictionary_translator_list.cpp \
           lambda/syntax/function_composition/higher_order_function.cpp \
           lambda/syntax/function_composition/integer_2_string_conversion.cpp \
           lambda/syntax/function_composition/sequence_translator.cpp \
           lambda/syntax/function_composition/value_translator_2_integral.cpp \
           lambda/syntax/function_composition/value_translator_4_literal_constant.cpp \
           lambda/syntax/function_composition/value_translator_4_stack.cpp \
           lambda/syntax/function_composition/value_translator_4_substring.cpp \
           lambda/syntax/function_composition/value_translators_mix.cpp \
           lambda/syntax/grammar/closure_compared_2_adaptor.cpp \
           lambda/syntax/grammar/grammar_production.cpp \
           lambda/syntax/grammar/kleene_star_vs_deref.cpp \
           lambda/syntax/grammar/lambda_grammar.cpp \
           lambda/syntax/grammar/node_text_insertion.cpp \
           lambda/syntax/node_edge/edge_translator.cpp \
           lambda/syntax/node_edge/node_edge_alias.cpp \
           lambda/syntax/node_edge/node_insert.cpp \
           lambda/syntax/node_edge/node_insert_substring.cpp \
           lambda/syntax/node_edge/node_token_boundary.cpp \
           lambda/syntax/scalar/alias_push_back_size.cpp \
           lambda/syntax/scalar/const_scalar.cpp \
           lambda/syntax/scalar/const_scalar_type.cpp \
           lambda/syntax/scalar/scalar_make_reference.cpp \
           lambda/syntax/scalar/scalar_primitive.cpp \
           lambda/syntax/scalar/scalar_reference_primitive.cpp \
           lambda/syntax/scalar/scalar_types_mix.cpp \
           lambda/syntax/stack/lambda_stack_decrement.cpp \
           lambda/syntax/stack/lambda_stack_primitive.cpp \
           lambda/syntax/stack/make_stack_demo.cpp \
           lambda/syntax/stack/stack_alias.cpp \
           lambda/syntax/stack/stack_as_scalar.cpp \
           lambda/syntax/stack/stack_typedefs.cpp \
           lambda/syntax/std_bitset/bitset_access.cpp \
           lambda/syntax/std_map_std_pair/map_pair_access.cpp \
           lambda/syntax/std_ostream/operator_xor.cpp \
           lambda/syntax/std_ostream/stream_output_iterator.cpp \
           lambda/syntax/std_set_std_pair/set_pair_access.cpp \
           lambda/syntax/stl_container/inode_writer.cpp \
           lambda/syntax/stl_container/integer_tree.cpp \
           lambda/syntax/stl_container/stl_container.cpp \
           lambda/syntax/stl_iterator/iterator_vector_subscript.cpp \
           lambda/syntax/stl_iterator/vector_iterator.cpp \
           lambda/syntax/subscript_operator/node_2_character_access.cpp \
           lambda/syntax/subscript_operator/vector_element_access.cpp \
           lambda/syntax/text_transformation/alias_text.cpp \
           lambda/syntax/text_transformation/closure_toupper.cpp \
           lambda/syntax/text_transformation/edge_2_edge_assign.cpp \
           lambda/syntax/text_transformation/edge_2_edge_text.cpp \
           lambda/syntax/text_transformation/edge_erase.cpp \
           lambda/syntax/text_transformation/string_2_edge_assign.cpp \
           lambda/syntax/text_transformation/string_2_edge_text.cpp \
           lambda/syntax/tracing/debugging_n_tracing.cpp \
           lambda/syntax/tracing/lambda_assert.cpp
OBJECTS = $(SOURCES:.cpp=.o)
EXECUTABLE = $(SOURCES:.cpp=.exe)

all: $(EXECUTABLE)

%.exe: %.o $(OBJECTS)
	g++ $< -o $@

%.o: %.cpp
	g++ -c $< -o $@ -I $(INCLUDEPATH)

clean:
	-rm -f $(EXECUTABLE) $(OBJECTS)
