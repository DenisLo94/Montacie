////////////////////////////////////////////////////////////////////////
//
// This file is part of Common Text Transformation Library.
// Copyright (C) 1997-2009 by Igor Kholodov. 
//
// Common Text Transformation Library is free software: you can
// redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Common Text Transformation Library is distributed in the hope
// that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE.  See the GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with Common Text Transformation Library.
// If not, see <http://www.gnu.org/licenses/>.
//
// mailto:cttl@users.sourceforge.net
// http://cttl.sourceforge.net/
// http://sourceforge.net/projects/cttl/
//
////////////////////////////////////////////////////////////////////////

/**@file xtl_op_speclzd.h
 * @brief Template specializations for CTTL operators.
 *
 * @remarks
 *      This file was generated by gumus script
 *      on Sun Aug 16 21:51:11 2009.
 *
 * @warning
 *      This is internal CTTL header file and should not
 *      be included by user programs.
 *
 */

#ifndef _CTTL_XTL_OP_SPECLZD_H_INCLUDED_
#define _CTTL_XTL_OP_SPECLZD_H_INCLUDED_

namespace cttl {


/* specialization for binary expr + CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr + CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator+ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* + expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinplus<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator+ ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinplus<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opplus_T;

    return xtl_wrap< opplus_T >( opplus_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}



/* specialization for binary expr | CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr | CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* | expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinpipe<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator| ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinpipe<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        oppipe_T;

    return xtl_wrap< oppipe_T >( oppipe_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}



/* specialization for binary expr || CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr || CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator|| ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* || expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbin2pipe<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator|| ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbin2pipe<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        op2pipe_T;

    return xtl_wrap< op2pipe_T >( op2pipe_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}



/* specialization for binary expr ^ CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr ^ CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator^ ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* ^ expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinconcat<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator^ ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinconcat<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opconcat_T;

    return xtl_wrap< opconcat_T >( opconcat_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}



/* specialization for binary expr - CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr - CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator- ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* - expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinminus<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator- ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinminus<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opminus_T;

    return xtl_wrap< opminus_T >( opminus_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}



/* specialization for binary expr & CTTL_STD_CHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_char< CTTL_STD_CHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_CHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_char< CTTL_STD_CHAR > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_char< CTTL_STD_CHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_WCHAR */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_char< CTTL_STD_WCHAR >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_WCHAR lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_char< CTTL_STD_WCHAR > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_char< CTTL_STD_WCHAR >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & bool */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_bool< false > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, bool rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_bool< false > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_bool< false >( rhs_expr_ ) ) );
}


/* specialization for binary bool & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_bool< false > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( bool lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_bool< false > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_bool< false >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_CHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_CHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_CHAR const* & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_CHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_STRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const& & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_STRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_WCHAR const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WCHAR const* rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WCHAR const* & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_WCHAR const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_WSTRING const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const& & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_WSTRING const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & std::set< CTTL_STD_STRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_STRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_keyword< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_STRING > const& & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( std::set< CTTL_STD_STRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_keyword< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_keyword< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & std::set< CTTL_STD_WSTRING > const& */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, std::set< CTTL_STD_WSTRING > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_keyword< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary std::set< CTTL_STD_WSTRING > const& & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( std::set< CTTL_STD_WSTRING > const& lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_keyword< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_keyword< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & iswhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswhat_entity >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, iswhat_T rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswhat_entity >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_iswhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswhat_T & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_iswhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( iswhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_iswhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_iswhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & iswwhat_T */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_iswwhat_entity >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, iswwhat_T rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_iswwhat_entity >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_iswwhat_entity( rhs_expr_ ) ) );
}


/* specialization for binary iswwhat_T & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_iswwhat_entity >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( iswwhat_T lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_iswwhat_entity >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_iswwhat_entity( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_STRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_STRING const* rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_STRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_STRING const* & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_STRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_STRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_ref_symbol< CTTL_STD_STRING >( lhs_expr_ ), rhs_expr_ ) );
}


/* specialization for binary expr & CTTL_STD_WSTRING const* */
template< typename Left_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< Left_exprT >,
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
    >
>
operator& ( xtl_wrap< Left_exprT > const& lhs_expr_, CTTL_STD_WSTRING const* rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< Left_exprT >,
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( lhs_expr_, xtl_text_ref_symbol< CTTL_STD_WSTRING >( rhs_expr_ ) ) );
}


/* specialization for binary CTTL_STD_WSTRING const* & expr */
template< typename Right_exprT >
inline
xtl_wrap<
    xtl_opbinand<
        xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
        xtl_wrap< Right_exprT >
    >
>
operator& ( CTTL_STD_WSTRING const* lhs_expr_, xtl_wrap< Right_exprT > const& rhs_expr_ )
{
    typedef
        xtl_opbinand<
            xtl_wrap< xtl_text_ref_symbol< CTTL_STD_WSTRING > >,
            xtl_wrap< Right_exprT >
        >
        opand_T;

    return xtl_wrap< opand_T >( opand_T( xtl_text_ref_symbol< CTTL_STD_WSTRING >( lhs_expr_ ), rhs_expr_ ) );
}


}/* namespace cttl */

#endif /* _CTTL_XTL_OP_SPECLZD_H_INCLUDED_ */
