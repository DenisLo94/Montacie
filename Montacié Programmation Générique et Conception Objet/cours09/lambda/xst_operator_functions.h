////////////////////////////////////////////////////////////////////////
//
// This file is part of Common Text Transformation Library.
// Copyright (C) 1997-2009 by Igor Kholodov. 
//
// Common Text Transformation Library is free software: you can
// redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Common Text Transformation Library is distributed in the hope
// that it will be useful, but WITHOUT ANY WARRANTY; without even
// the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE.  See the GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with Common Text Transformation Library.
// If not, see <http://www.gnu.org/licenses/>.
//
// mailto:cttl@users.sourceforge.net
// http://cttl.sourceforge.net/
// http://sourceforge.net/projects/cttl/
//
////////////////////////////////////////////////////////////////////////

/**@file xst_operator_functions.h
 * @brief Defines lambda operator functions.
 *
 * This file was generated by gumus script on Sun Aug 16 21:52:47 2009.
 *
 * @warning
 *      This is internal CTTL header file and should not
 *      be included by user programs.
 *
 */

// xst_operator_functions.h

#ifndef _XST_OPERATOR_FUNCTIONS_H_INCLUDED_
#define _XST_OPERATOR_FUNCTIONS_H_INCLUDED_

namespace cttl {

using namespace cttl_impl;

// generated by bin/gmu/gmu_lambda/gmu_common.h:345
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary * operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda dereference unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_dereference_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_dereference_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator* ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_dereference_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda dereference unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_dereference_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_dereference_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator* ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_dereference_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda dereference unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_dereference_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_dereference_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator* ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_dereference_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary * operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:405
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary ++ operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda prefix increment unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_increment_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_prefix_increment_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator++ ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_prefix_increment_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda prefix increment unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_increment_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_prefix_increment_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator++ ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_prefix_increment_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda prefix increment unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_increment_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_prefix_increment_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator++ ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_prefix_increment_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary ++ operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:422
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary ++ operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda postfix increment unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_increment_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_postfix_increment_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator++ ( xst_lambda_wrap< LambdaT > const& lambda_, int )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_postfix_increment_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda postfix increment unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_increment_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_postfix_increment_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator++ ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_, int )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_postfix_increment_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda postfix increment unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_increment_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_postfix_increment_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator++ ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_, int )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_postfix_increment_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary ++ operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:494
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary -- operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda prefix decrement unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_decrement_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_prefix_decrement_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator-- ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_prefix_decrement_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda prefix decrement unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_decrement_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_prefix_decrement_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator-- ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_prefix_decrement_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda prefix decrement unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_prefix_decrement_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_prefix_decrement_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator-- ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_prefix_decrement_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary -- operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:511
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary -- operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda postfix decrement unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_decrement_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_postfix_decrement_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator-- ( xst_lambda_wrap< LambdaT > const& lambda_, int )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_postfix_decrement_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda postfix decrement unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_decrement_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_postfix_decrement_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator-- ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_, int )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_postfix_decrement_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda postfix decrement unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_postfix_decrement_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_postfix_decrement_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator-- ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_, int )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_postfix_decrement_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary -- operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:309
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary + operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda plus unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_rvalue_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_rvalue_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator+ ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_rvalue_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda plus unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_rvalue_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_rvalue_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator+ ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_rvalue_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda plus unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_rvalue_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_rvalue_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator+ ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_rvalue_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary + operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/unary_functions.h:7
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary - operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda unary minus unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_unary_minus_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_unary_minus_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator- ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_unary_minus_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda unary minus unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_unary_minus_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_unary_minus_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator- ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_unary_minus_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda unary minus unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_unary_minus_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_unary_minus_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator- ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_unary_minus_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary - operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/unary_functions.h:24
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary ~ operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda bitwise not unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_bitwise_not_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_bitwise_not_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator~ ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_bitwise_not_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda bitwise not unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_bitwise_not_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_bitwise_not_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator~ ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_bitwise_not_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda bitwise not unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_bitwise_not_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_bitwise_not_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator~ ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_bitwise_not_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary ~ operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/unary_functions.h:41
// generated by bin/gmu/gmu_lambda/gmu_common.h:197
////////////////////////////////////////////////////////////////////////////
// Unary ! operators begin
////////////////////////////////////////////////////////////////////////////
// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:4
    /**Lambda logical not unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of lambda operand.
    *
    * @param lambda_
    *        lambda operand.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_logical_not_policy operator policy.
    *
    */
    template< typename LambdaT >
    inline
    xst_unary_adaptor<
        xst_lambda_wrap< typename LambdaT::reference_T >,
        xst_logical_not_policy<
            LambdaT::capacity_,
            LambdaT::primitive_id_
        >
    >
    operator! ( xst_lambda_wrap< LambdaT > const& lambda_ )
    {
        typedef xst_unary_adaptor<
            xst_lambda_wrap< typename LambdaT::reference_T >,
            xst_logical_not_policy<
                LambdaT::capacity_,
                LambdaT::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lambda_.make_reference() );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:44
    /**Lambda logical not unary operator support.
    *
    * @tparam LambdaT
    *        specifies type of
    *        lambda expression encapsulated by xst_unary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy of xst_unary_adaptor.
    *
    * @param unary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_logical_not_policy operator policy.
    *
    */
    template< typename LambdaT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
        xst_logical_not_policy<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
            primitive_id_unary_adaptor
        >
    >
    operator! ( xst_unary_adaptor< LambdaT, PolicyAdaptorT > const& unary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_unary_adaptor< LambdaT, PolicyAdaptorT >,
            xst_logical_not_policy<
                xst_unary_adaptor< LambdaT, PolicyAdaptorT >::capacity_,
                primitive_id_unary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( unary_adaptor_ );
    }

// generated by bin\gmu\gmu_lambda\operators/gp_unary_funcs.h:89
    /**Lambda logical not unary operator support.
    *
    * @tparam LambdaLhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam LambdaRhsT
    *        specifies type of
    *        lambda expression encapsulated by cttl_impl::xst_binary_adaptor.
    *
    * @tparam PolicyAdaptorT
    *        specifies type of
    *        policy class of cttl_impl::xst_binary_adaptor.
    *
    * @param binary_adaptor_
    *        reference to lambda expression policy instance.
    *
    * @return
    *        Instance of lambda expression policy
    *        cttl_impl::xst_unary_adaptor, parameterized by
    *        cttl_impl::xst_logical_not_policy operator policy.
    *
    */
    template< typename LambdaLhsT, typename LambdaRhsT, typename PolicyAdaptorT >
    inline
    xst_unary_adaptor<
        xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
        xst_logical_not_policy<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
            primitive_id_binary_adaptor
        >
    >
    operator! ( xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT > const& binary_adaptor_ )
    {
        typedef xst_unary_adaptor<
            xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >,
            xst_logical_not_policy<
                xst_binary_adaptor< LambdaLhsT, LambdaRhsT, PolicyAdaptorT >::capacity_,
                primitive_id_binary_adaptor
            >
        > xst_adaptor_T;

        return xst_adaptor_T( binary_adaptor_ );
    }

////////////////////////////////////////////////////////////////////////////
// Unary ! operators end
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_functions.h:13
////////////////////////////////////////////////////////////////////////////
// Binary + operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda addition binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of addition operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of addition operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_add_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary + operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:16
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary + operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_add_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_add_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator+ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_add_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator+ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_add_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator+ (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator+ (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator+ (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator+ (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator+ (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator+ (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator+ (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator+ (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator+ (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator+ (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator+ (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator+ (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_add_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_add_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda addition binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_add_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator+ (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_add_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary + operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:34
////////////////////////////////////////////////////////////////////////////
// Binary * operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda multiplication binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of multiplication operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of multiplication operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_multiplication_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary * operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:37
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary * operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator* (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_multiplication_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator* (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_multiplication_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator* (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator* (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator* (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator* (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator* (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator* (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator* (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator* (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator* (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator* (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator* (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator* (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_multiplication_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_multiplication_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda multiplication binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_multiplication_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator* (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_multiplication_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary * operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:55
////////////////////////////////////////////////////////////////////////////
// Binary / operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda division binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of division operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of division operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_division_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary / operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:58
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary / operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_division_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_division_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator/ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_division_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator/ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_division_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator/ (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator/ (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator/ (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator/ (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator/ (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator/ (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator/ (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator/ (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator/ (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator/ (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator/ (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator/ (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_division_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_division_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda division binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_division_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator/ (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_division_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary / operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:76
////////////////////////////////////////////////////////////////////////////
// Binary % operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda modulus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of modulus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of modulus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_modulus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary % operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:79
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary % operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator% (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_modulus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator% (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_modulus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator% (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator% (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator% (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator% (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator% (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator% (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator% (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator% (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator% (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator% (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator% (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator% (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_modulus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_modulus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda modulus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_modulus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator% (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_modulus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary % operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:97
////////////////////////////////////////////////////////////////////////////
// Binary - operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda binary minus binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of binary minus operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of binary minus operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_binary_minus_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary - operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:100
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary - operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator- (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_minus_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator- (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_minus_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator- (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator- (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator- (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator- (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator- (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator- (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator- (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator- (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator- (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator- (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator- (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator- (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_binary_minus_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_binary_minus_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda binary minus binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_binary_minus_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator- (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_binary_minus_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary - operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:118
////////////////////////////////////////////////////////////////////////////
// Binary << operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise left shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise left shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_left_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary << operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:121
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary << operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<< (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<< (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<< (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<< (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<< (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<< (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<< (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<< (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<< (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<< (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<< (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<< (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_left_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_left_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise left shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_left_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<< (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_left_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary << operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:139
////////////////////////////////////////////////////////////////////////////
// Binary >> operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise right shift operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise right shift operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_right_shift_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary >> operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:142
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary >> operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>> (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>> (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>> (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>> (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>> (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>> (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>> (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>> (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>> (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>> (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>> (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>> (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_right_shift_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_right_shift_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise right shift binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_right_shift_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>> (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_right_shift_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary >> operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:160
////////////////////////////////////////////////////////////////////////////
// Binary < operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary < operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:163
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary < operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator< (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator< (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator< (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator< (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator< (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator< (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator< (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator< (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator< (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator< (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator< (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator< (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator< (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator< (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator< (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary < operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:181
////////////////////////////////////////////////////////////////////////////
// Binary <= operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational less equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational less equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_less_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary <= operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:184
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary <= operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator<= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator<= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<= (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<= (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator<= (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<= (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<= (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator<= (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<= (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<= (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator<= (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<= (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<= (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator<= (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_less_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_less_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational less equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_less_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator<= (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_less_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary <= operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:202
////////////////////////////////////////////////////////////////////////////
// Binary > operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary > operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:205
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary > operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator> (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator> (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator> (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator> (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator> (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator> (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator> (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator> (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator> (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator> (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator> (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator> (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator> (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator> (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator> (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary > operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:223
////////////////////////////////////////////////////////////////////////////
// Binary >= operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of relational greater equal operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of relational greater equal operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_relational_greater_equal_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary >= operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:226
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary >= operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator>= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator>= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>= (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>= (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator>= (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>= (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>= (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator>= (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>= (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>= (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator>= (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>= (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>= (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator>= (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_relational_greater_equal_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_relational_greater_equal_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda relational greater equal binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_relational_greater_equal_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator>= (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_relational_greater_equal_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary >= operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:244
////////////////////////////////////////////////////////////////////////////
// Binary == operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda equality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of equality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of equality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_equality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary == operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:247
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary == operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator== (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_equality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator== (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_equality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator== (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator== (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator== (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator== (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator== (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator== (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator== (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator== (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator== (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator== (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator== (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator== (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_equality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_equality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda equality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_equality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator== (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_equality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary == operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:265
////////////////////////////////////////////////////////////////////////////
// Binary != operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda inequality binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of inequality operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of inequality operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_inequality_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary != operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:268
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary != operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator!= (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_inequality_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator!= (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_inequality_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator!= (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator!= (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator!= (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator!= (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator!= (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator!= (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator!= (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator!= (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator!= (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator!= (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator!= (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator!= (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_inequality_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_inequality_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda inequality binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_inequality_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator!= (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_inequality_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary != operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:286
////////////////////////////////////////////////////////////////////////////
// Binary & operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary & operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:289
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary & operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator& (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator& (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator& (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator& (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator& (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator& (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator& (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator& (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator& (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator& (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator& (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator& (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator& (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary & operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:307
////////////////////////////////////////////////////////////////////////////
// Binary | operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of bitwise inclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_bitwise_ior_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary | operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:310
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary | operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator| (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator| (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator| (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator| (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator| (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator| (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator| (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator| (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator| (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator| (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator| (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator| (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_bitwise_ior_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_bitwise_ior_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda bitwise inclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_bitwise_ior_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator| (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_bitwise_ior_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary | operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:328
////////////////////////////////////////////////////////////////////////////
// Binary && operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical and binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical and operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical and operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_and_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary && operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:331
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary && operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator&& (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_and_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator&& (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_and_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator&& (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator&& (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator&& (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator&& (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator&& (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator&& (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator&& (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator&& (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator&& (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator&& (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator&& (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator&& (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_and_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_and_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical and binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_and_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator&& (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_and_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary && operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:349
////////////////////////////////////////////////////////////////////////////
// Binary || operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda logical or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of logical or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of logical or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_logical_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary || operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:352
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary || operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:53
// generated by set_left_lambda(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator|| (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_.make_reference(),
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_logical_or_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator|| (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_logical_or_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator|| (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator|| (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator|| (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator|| (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator|| (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator|| (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator|| (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator|| (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator|| (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator|| (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator|| (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator|| (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_logical_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_logical_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda logical or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_logical_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator|| (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_logical_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary || operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:370
////////////////////////////////////////////////////////////////////////////
// Binary ^ operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:230
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator_xor (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator^ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator^ (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of exclusive or operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of exclusive or operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_exclusive_or_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary ^ operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:373
////////////////////////////////////////////////////////////////////////////
// Abbreviated binary ^ operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param value_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int value_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_unsigned_int();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pvalue_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        unsigned int* pvalue_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param stack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT > const& stack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:61
// generated by set_left_unary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:68
// generated by set_left_binary(); set_right_abbreviation_ptr_stack();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:23
// generated by bin\gmu\gmu_lambda\operators/gp_right_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param pstack_
    *        right operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename ValueT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator^ (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        std::stack< ValueT >* pstack_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            lhs_lambda_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ )
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator^ (
        int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator^ (
        int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::capacity_,
            xst_lambda_wrap< xst_scalar< int > >::primitive_id_
        >
    >
    operator^ (
        int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::capacity_,
                xst_lambda_wrap< xst_scalar< int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator^ (
        int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator^ (
        int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
        >
    >
    operator^ (
        int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator^ (
        unsigned int value_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator^ (
        unsigned int value_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param value_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
        >
    >
    operator^ (
        unsigned int value_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int > >( value_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator^ (
        unsigned int* pvalue_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator^ (
        unsigned int* pvalue_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_unsigned_int(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pvalue_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< unsigned int& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
            xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
        >
    >
    operator^ (
        unsigned int* pvalue_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< unsigned int& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::capacity_,
                xst_lambda_wrap< xst_scalar< unsigned int& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< unsigned int& > >( pvalue_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT > const& stack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT > const& stack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param stack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_scalar< ValueT > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
            xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT > const& stack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_scalar< ValueT > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::capacity_,
                xst_lambda_wrap< xst_scalar< ValueT > >::primitive_id_
            >
        > xst_adaptor_T;
assert( !stack_.empty() );  // have you forgot to pass stack by address, instead of passing it by value?
        return xst_adaptor_T(
            xst_lambda_wrap< xst_scalar< ValueT > >( stack_.top() ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:90
// generated by set_left_abbreviation_ptr_stack(); set_right_lambda();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_exclusive_or_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT >* pstack_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_exclusive_or_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_.make_reference()
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:97
// generated by set_left_abbreviation_ptr_stack(); set_right_unary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT >* pstack_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:104
// generated by set_left_abbreviation_ptr_stack(); set_right_binary();
// generated by bin/gmu/gmu_lambda/binary_abbrev_functions.h:13
// generated by bin\gmu\gmu_lambda\operators/gp_left_abbrev_bin_func.h:1

    /**Lambda exclusive or binary operator support.
    *
    * @param pstack_
    *        left operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object.
    *
    */
    template< typename ValueT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_exclusive_or_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
        >
    >
    operator^ (
        std::stack< ValueT >* pstack_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_exclusive_or_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::capacity_,
                xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >::primitive_id_
            >
        > xst_adaptor_T;
        return xst_adaptor_T(
            xst_lambda_wrap< xst_stack< std::stack< ValueT >& > >( pstack_ ),
            rhs_lambda_
            );
    }

////////////////////////////////////////////////////////////////////////////
// Binary ^ operators end
////////////////////////////////////////////////////////////////////////////
// generated by bin/gmu/gmu_lambda/binary_functions.h:391
////////////////////////////////////////////////////////////////////////////
// Binary , operators begin
////////////////////////////////////////////////////////////////////////////

// generated by bin/gmu/gmu_lambda/gmu_common.h:224
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_comma_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator, (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_comma_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:236
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator, (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:240
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_lambda_wrap< typename LeftLambdaT::reference_T >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::capacity_,
            xst_lambda_wrap< LeftLambdaT >::primitive_id_
        >
    >
    operator, (
        xst_lambda_wrap< LeftLambdaT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_lambda_wrap< typename LeftLambdaT::reference_T >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::capacity_,
                xst_lambda_wrap< LeftLambdaT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_.make_reference(), rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:247
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_comma_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_comma_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:251
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:255
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::capacity_,
                xst_unary_adaptor< LeftLambdaT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:261
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_lambda_wrap< typename RightLambdaT::reference_T >,
        xst_comma_policy<
            xst_lambda_wrap< RightLambdaT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_lambda_wrap< RightLambdaT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_lambda_wrap< typename RightLambdaT::reference_T >,
            xst_comma_policy<
                xst_lambda_wrap< RightLambdaT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_.make_reference() );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:265
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_unary_adaptor< RightLambdaT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

// generated by bin/gmu/gmu_lambda/gmu_common.h:269
// generated by bin/gmu/gmu_lambda/gmu_common.h:207
// generated by bin\gmu\gmu_lambda\operators/gp_binary_function.h:1

    /**Lambda comma binary operator support.
    *
    * @par <tt>typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT</tt>
    *        specifies type of
    *        left-hand-side lambda operand of comma operator.
    *
    * @par <tt>typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT</tt>
    *        specifies type of
    *        right-hand-side lambda operand of comma operator.
    *
    * @param lhs_lambda_
    *        left-hand-side lambda operand.
    *
    * @param rhs_lambda_
    *        right-hand-side lambda operand.
    *
    * @return
    *        Instance of lambda expression policy object
    *        cttl_impl::xst_binary_adaptor, parameterized by
    *        xst_comma_policy operator policy.
    *
    */
    template< typename LeftLambdaLhsExprT, typename LeftLambdaRhsExprT, typename LeftPolicyAdaptorT, typename RightLambdaLhsT, typename RightLambdaRhsT, typename RightPolicyAdaptorT >
    inline
    xst_binary_adaptor<
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
        xst_comma_policy<
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
        >
    >
    operator, (
        xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT > const& lhs_lambda_,
        xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT > const& rhs_lambda_
        )
    {
        typedef xst_binary_adaptor<
            xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >,
            xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >,
            xst_comma_policy<
                xst_binary_adaptor< RightLambdaLhsT, RightLambdaRhsT, RightPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::capacity_,
                xst_binary_adaptor< LeftLambdaLhsExprT, LeftLambdaRhsExprT, LeftPolicyAdaptorT >::primitive_id_
            >
        > xst_adaptor_T;

        return xst_adaptor_T( lhs_lambda_, rhs_lambda_ );
    }

////////////////////////////////////////////////////////////////////////////
// Binary , operators end
////////////////////////////////////////////////////////////////////////////

}   // namespace cttl


#endif //_XST_OPERATOR_FUNCTIONS_H_INCLUDED_
